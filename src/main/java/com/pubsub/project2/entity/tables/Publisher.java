/*
 * This file is generated by jOOQ.
*/
package com.pubsub.project2.entity.tables;


import com.pubsub.project2.entity.Indexes;
import com.pubsub.project2.entity.Keys;
import com.pubsub.project2.entity.PubsubPhase2;
import com.pubsub.project2.entity.tables.records.PublisherRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Publisher extends TableImpl<PublisherRecord> {

    private static final long serialVersionUID = 451306220;

    /**
     * The reference instance of <code>pubsub_phase2.publisher</code>
     */
    public static final Publisher PUBLISHER = new Publisher();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublisherRecord> getRecordType() {
        return PublisherRecord.class;
    }

    /**
     * The column <code>pubsub_phase2.publisher.id</code>.
     */
    public final TableField<PublisherRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>pubsub_phase2.publisher.webhook_url</code>.
     */
    public final TableField<PublisherRecord, String> WEBHOOK_URL = createField("webhook_url", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>pubsub_phase2.publisher.nick_name</code>.
     */
    public final TableField<PublisherRecord, String> NICK_NAME = createField("nick_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pubsub_phase2.publisher.is_active</code>.
     */
    public final TableField<PublisherRecord, Byte> IS_ACTIVE = createField("is_active", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>pubsub_phase2.publisher</code> table reference
     */
    public Publisher() {
        this(DSL.name("publisher"), null);
    }

    /**
     * Create an aliased <code>pubsub_phase2.publisher</code> table reference
     */
    public Publisher(String alias) {
        this(DSL.name(alias), PUBLISHER);
    }

    /**
     * Create an aliased <code>pubsub_phase2.publisher</code> table reference
     */
    public Publisher(Name alias) {
        this(alias, PUBLISHER);
    }

    private Publisher(Name alias, Table<PublisherRecord> aliased) {
        this(alias, aliased, null);
    }

    private Publisher(Name alias, Table<PublisherRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PubsubPhase2.PUBSUB_PHASE2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PUBLISHER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PublisherRecord, Long> getIdentity() {
        return Keys.IDENTITY_PUBLISHER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PublisherRecord> getPrimaryKey() {
        return Keys.KEY_PUBLISHER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PublisherRecord>> getKeys() {
        return Arrays.<UniqueKey<PublisherRecord>>asList(Keys.KEY_PUBLISHER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Publisher as(String alias) {
        return new Publisher(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Publisher as(Name alias) {
        return new Publisher(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Publisher rename(String name) {
        return new Publisher(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Publisher rename(Name name) {
        return new Publisher(name, null);
    }
}
